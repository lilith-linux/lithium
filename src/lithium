#!/usr/bin/env bash
set -e
#
#                Lilith Linux install medium creator
#
#       Licensed Under BSD-3-Clause License. Please read LICENSE file
#

HCLOS="${HCLOS:-/usr/sbin/hclos}"

# ===============================
# Utilities
# ===============================

check_exist_config_files() {
  local files=("config.sh" "packages-initramfs" "packages-squashfs" "grub" "grub/grub.cfg")
  for f in "${files[@]}"; do
    if [[ ! -e "$f" ]]; then
      echo "ERROR: $f not found in $PWD"
      echo "Please create and configure $f and retry this script."
      exit 1
    fi
  done
}

check_and_create_required_dirs() {
  local create_dirs=("hooks" "hooks/initramfs" "hooks/squashfs")
  for dir in "${create_dirs[@]}"; do
    mkdir -p "$dir"
  done
}

initialize() {
  cp -r /etc/mklilithiso/templates/* .
  echo "Initialized project with template files."
}

# ===============================
# Package Installation
# ===============================

install_packages() {
  local target="$1"       # initramfs or squashfs
  local pkgfile="packages-$target"
  local prefix="./works/rootfs/$target"

  mkdir -p "$prefix"

  echo ">>> Updating package list for $target..."
  "${HCLOS}" update --prefix "$prefix"

  echo ">>> Installing busybox for $target..."
  "${HCLOS}" install --prefix "$prefix" --disable-scripts busybox

  echo ">>> Installing packages for $target..."
  local pkgs
  pkgs=$(grep -vE '^\s*(#|$)' "$pkgfile" | xargs)
  if [[ -n "$pkgs" ]]; then
    "${HCLOS}" install --prefix "$prefix" $pkgs
  else
    echo "WARN: No packages listed in $pkgfile"
  fi
}

# ===============================
# Hook Executor
# ===============================

run_hooks() {
  local target="$1"
  local chroot_dir="./works/rootfs/$target"
  local hooks_dir="./hooks/$target"

  echo ">>> Running ${target} hooks..."
  [[ -d "$hooks_dir" ]] || return 0

  for hook in $(ls "$hooks_dir"/*.sh 2>/dev/null | sort); do
    echo ">>> Running $(basename "$hook") ..."
    cp "$hook" "$chroot_dir/$(basename "$hook")"
    chroot "$chroot_dir" /usr/bin/sh "/$(basename "$hook")"
    rm "$chroot_dir/$(basename "$hook")"
  done
}

# ===============================
# Builders
# ===============================

gen_initramfs() {
  run_hooks "initramfs"

  echo ">>> Creating initramfs..."
  mkdir -p works/iso/boot
  (cd works/rootfs/initramfs && find . | cpio -H newc -o | gzip > ../../iso/boot/initramfs.cpio.gz)
}

gen_squashfs() {
  run_hooks "squashfs"

  echo ">>> Creating squashfs image..."
  mkdir -p works/iso/boot
  mksquashfs works/rootfs/squashfs works/iso/boot/rootfs.squashfs -comp "${COMP:-gzip}" -b 1M
}

gen_vmlinuz() {
  echo ">>> Installing vmlinuz for iso..."
  mkdir -p works/kernel
  
  ${HCLOS} update --prefix works/kernel

  ${HCLOS} install --prefix works/kernel --disable-scripts busybox
  ${HCLOS} install --prefix works/kernel linux

  echo ">>> Copy vmlinuz..."
  cp -v works/kernel/boot/vmlinuz works/iso/boot/vmlinuz
}

gen_iso() {
  echo ">>> Generating ISO image..."
  cp grub works/iso/boot/ -r
  grub-mkrescue -o "${TARGET:-./lilith-$(date +"%Y-%m-%d").iso}" "works/iso"
}

# ===============================
# Build Flow
# ===============================

build() {
  rm -rf "works"
  check_exist_config_files
  check_and_create_required_dirs

  install_packages "initramfs"
  install_packages "squashfs"

  gen_initramfs
  gen_squashfs
  gen_vmlinuz
  gen_iso

  echo "Build completed successfully!"
}

# ===============================
# Main Entrypoint
# ===============================

main() {
  case "$1" in
    init)
      initialize
      ;;
    build)
      build
      ;;
    *)
      echo "Usage: $0 [init|build]"
      exit 1
      ;;
  esac
}

main "$@"

